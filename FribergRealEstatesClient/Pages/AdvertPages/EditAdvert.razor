@*Auth Hamza*@
@page "/edit-advert/{id:int}"
@inject IClient client
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudCard>
    <MudCardContent>
        @if (advertDto == null)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            <EditForm Model="advertDto" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    @*Price*@
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="advertDto.CurrentPrice"
                                         Label="Current Price"
                                         HideSpinButtons ="true"
                                         Variant="Variant.Filled"
                                         Required="true"
                                         Min="0">
                        </MudNumericField>
                    </MudItem>

                    @*Datetime update*@
                    <MudItem xs="12">
                        <MudText Typo="Typo.body2">Senast uppdaterad : @advertDto.Updated.ToString("g")</MudText>
                    </MudItem>

                    @*Bool*@
                    <MudItem xs="12">
                        <MudSwitch @bind-Value="advertDto.Sold"
                                   Label="Sold"
                                   Color="Color.Info" />
                    </MudItem>

                    @*Button*@
                    <MudItem xs="12" class="mt-4">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   ButtonType="ButtonType.Submit">
                            Spara
                        </MudButton>

                        <MudButton Variant="Variant.Text"
                                   Color="Color.Default"
                                   Class="ml-2"
                                   OnClick="Cancel">
                            Avbryt
                        </MudButton>
                    </MudItem>

                </MudGrid>
            </EditForm>
        }
    </MudCardContent>
</MudCard>


@code {
    [Parameter]
    public int id { get; set; }
    private AdvertUpdateDto advertUpdatedDto;
    private AdvertDto advertDto;

    private async Task HandleSubmit()
    {
        try
        {
            advertUpdatedDto.CurrentPrice = advertDto.CurrentPrice;
            advertUpdatedDto.Sold = advertDto.Sold;
            advertUpdatedDto.Updated = DateTime.UtcNow;
            await client.EditAsync(id, advertUpdatedDto);

            Snackbar.Add("Advert updated successfully!", Severity.Success);
            Navigation.NavigateTo("/my-active-adverts");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating advert: {ex.Message}", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            advertDto = await client.AdvertAsync(id);
            if (advertDto == null)
            {
                Snackbar.Add("Advert not found", Severity.Error);
                Navigation.NavigateTo("/");
            }
            else
            {
                advertUpdatedDto = new AdvertUpdateDto
                    {
                        CurrentPrice = advertDto.CurrentPrice,
                        Sold = advertDto.Sold
                    };
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading advert: {ex.Message}", Severity.Error);
        }
    }
    private void Cancel()
    {
        Navigation.NavigateTo("/my-active-adverts");
    }
}

