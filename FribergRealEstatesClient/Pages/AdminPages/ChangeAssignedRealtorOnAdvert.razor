@page "/change-assigned-realtor-advert"
@inject IAdvertService advertService
@inject IRealtorService realtorService
@inject ISnackbar snackbar

<PageTitle>Byta tilldelad mäklare på annons</PageTitle>
@if (adverts == null && realtors == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <div class="container">
        <MudText Typo="Typo.h3" Class="px-5 m-0 mb-4" Style="text-align:center; background-color:#273845; color: white;">Koppla mäklare till byrå</MudText>
        <MudList T="string" Class="mx-auto">
            @foreach (var advert in adverts)
            {
                <MudListItem Class="py-1">
                    <MudPaper Elevation="2" Class="p-4" Style="width: 100%; border-radius: 12px;">
                        <div style="display: flex; justify-content: center; align-items: center; align-content: center; width: 100%">
                            <div style="display: grid; grid-template-columns: 60px 180px 160px 150px 250px 40px; align-items: center; gap: 1rem; max-width: 900px; width: 100%;">
                                <MudAvatar>
                                    <MudImage Src="@advert.Residence.ImageUrls.FirstOrDefault()" Alt="Residencebild"> </MudImage>
                                </MudAvatar>
                                <MudText Typo="Typo.h6">@advert.Residence.Address.Street</MudText>
                                <MudText Typo="Typo.body2">@advert.Residence.Address.City</MudText>
                                <MudText Typo="Typo.body2">@advert.CurrentPrice</MudText>

                                <MudSelect T="int" @bind-Value="advert.Realtor.Id" Label="Kopplad Mäklare">
                                    @foreach (var realtor in realtors)
                                    {
                                        <MudSelectItem Value="realtor.Id">@realtor.FirstName @realtor.LastName</MudSelectItem>
                                    }

                                </MudSelect>

                                <MudIconButton Icon="@Icons.Material.Filled.Save"
                                Color="Color.Primary"
                                OnClick="@(() => SaveAgencyAsync(advert.Id))"
                                Disabled="!originalAdvertIds.ContainsKey(advert.Id) || originalAdvertIds[advert.Id] == advert.Realtor.Id"
                                Size="Size.Small"
                                aria-label="Spara" />
                            </div>
                        </div>
                    </MudPaper>
                </MudListItem>
            }
        </MudList>
    </div>
}

@code {
    private List<AdvertDto> adverts = new();
    private List<AdminRealtorUserDto> realtors = new();
    private Dictionary<int, int> originalAdvertIds = new();

    protected override async Task OnInitializedAsync()
    {
        realtors = (await realtorService.GetAllRealtors()).ToList();
        adverts = await advertService.AllActiveAdvertsAsync();

        foreach (var i in adverts)
        {
            originalAdvertIds[i.Id] = i.Realtor.Id;
        }
    }

    
    private async Task SaveAgencyAsync(int advertId)
    {
        var advert = adverts.FirstOrDefault(r => r.Id == advertId);

        if (advert == null || advert.Realtor.Id is 0)
        {
            snackbar.Add("Du måste välja en byrå innan du kan spara.", Severity.Warning);
            return;
        }
        try
        {
            var dto = new AdvertUpdateDto
                {
                    RealtorId = advert.Realtor.Id,
                    Sold = advert.Sold,
                    CurrentPrice = advert.CurrentPrice,
                    Updated = DateTime.Now
                };

            await advertService.UpdateAdvert(advertId, dto);

            adverts = await advertService.AllActiveAdvertsAsync();

            originalAdvertIds[advert.Id] = advert.Realtor.Id;

            snackbar.Add("Annonsen uppdaterades med ny mäklare.", Severity.Success);
        }
        catch (Exception ex)
        {
            snackbar.Add($"Fel vid uppdatering, {ex.Message}", Severity.Error);
        }
    }
}
