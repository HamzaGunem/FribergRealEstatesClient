@*Auth Hamza*@
@page "/My-agency"
@inject IRealtorService realtorService
@inject IAgencyService agencyService

<div class="container-large">

    @if (realtor != null)
    {
    //Om
        <h3 style="margin: 1rem auto; text-align:center; justify-content: center">Om</h3>
        <AgencyProfile Id="@realtor.Realtor.AgencyId.Value"></AgencyProfile>

        //Status
        <div style="display: flex; justify-content: center; align-items: center; gap: 20px;" class="mt-2">
            <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@chartData" InputLabels="@chartLabels">
                <CustomGraphics>
                    <text class="donut-inner-text" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="20">Total</text>
                    <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="50">@totalSoldAndActive</text>
                </CustomGraphics>
            </MudChart>
        </div>

        //Mäklare
        <div class="mt-2">
            <h3 style="margin: 1rem auto; text-align:center; justify-content: center">Mäklare</h3>
            <RealtorProfileSmall Id="@realtor.Realtor.AgencyId.Value"></RealtorProfileSmall>
        </div>
    }

</div>

@code {
    private RealtorFullProfileDto realtor;
    private AgencyWithSimpleRealtorsDto agency;
    private double[] chartData;
    private string[] chartLabels;
    private int totalSoldAndActive;
    private int totalSold;
    private int totalActive;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            realtor = await realtorService.GetMyProfileAsync();
            agency = await agencyService.GetAgencyProfile(realtor.Realtor.AgencyId.Value);
            foreach (var realtorItem in agency.Realtors)
            {
                foreach (var advert in realtorItem.ActiveAdverts)
                {
                    if (advert.Sold)
                        totalSold += 1;
                    else
                        totalActive += 1;
                }
            }
            totalSoldAndActive = totalActive + totalSold;
            chartData = new double[]
            {
                totalActive,
                totalSold
            };

            chartLabels = new string[]
            {
                $"Active Adverts",
                $"Sold Adverts",
            };

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fel vid hämtning av profil: {ex.Message}");
        }
    }
}
