
@*Made by Samuel*@
@*Updated and Styled by Jonathan *@
@page "/agency/search"
@inject IAgencyService agencyService
@inject NavigationManager navManager

<Animation AnimationSelected="@zoomOutDownAnimationSelected" ExtraDelay="250" ExtraDuration="600">
    <PageTitle>Sök Mäklarbyrå</PageTitle>

<div class="mt-4 container-fluid">
	<MudGrid>
		<MudItem xs="12" sm="4" md="4">
			<GenericSearchBox _searchTerm="@_searchTerm"
							  _searchTitle="@_setSearchBoxTitle"
							  OnSearch="SearchAgencies">
			</GenericSearchBox>
		</MudItem>
		<MudItem xs="12" sm="12" md="6">
			@* Adverts *@
			<div class="advert-list-container">
				@if (_searching)
				{
					<MudProgressCircular Indeterminate="true" Color="Color.Primary" />
				}
				else if (_searchPerformed == false)
				{
					<MudText>Ange sökkriterier och klicka på Sök</MudText>
				}
				else if (_searchPerformed && !_getAgencies.Any())
				{
					<MudAlert Severity="Severity.Info">Inga mäklarbyråer hittades i @_searchTerm</MudAlert>
				}
				else
				{
						@foreach (var agency in _getAgencies)
						{
							<AgencyCard agency="agency"/>
						}
				}
			</div>
		</MudItem>
	</MudGrid>
</div>
</Animation>
@code {
	private List<AgencyWithSimpleRealtorsDto>? _getAgencies = new();
	private List<SimpleRealtorDto> _getRealtors = new();

    private string _searchTerm = string.Empty;
    private bool _searching = false;
    private bool _searchPerformed = false;
    private string _setSearchBoxTitle = "Sök mäklarbyrå i stad/kommun";

    private string _errorAgency = "Hittade inga byråer i";
    private string _errorRealtors = "Inga registrerade mäklare";


    //Animations
    private string zoomOutDownAnimationSelected = "";


    protected override void OnInitialized()
    {
        zoomOutDownAnimationSelected = AnimationsToSelect.zoomOutDown;
    }

    private async Task SearchAgencies(string term)
    {
        _searching = true;
        _searchPerformed = false;
        StateHasChanged();

        await Task.Delay(500);
        _searchTerm = term;
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            try
            {
                _getAgencies = await agencyService.GetAllAgenciesInCommun(_searchTerm);
            }
            finally
            {
                _searching = false;
                _searchPerformed = true;
                StateHasChanged();
            }
        }
    }

    private void NavigateToAgency(int id)
    {
        navManager.NavigateTo($"/agency/{id}");
    }

    private void NavigateToRealtor(int id)
    {
        navManager.NavigateTo($"/realtor/{id}");
    }

    private List<string> GetRealtorsImages(AgencyWithSimpleRealtorsDto agency)
    {
        List<string> newList = new();
        foreach (var realtor in agency.Realtors)
        {
            newList.Add(realtor.PictureUrl);
        }
        return newList;
    }
}
