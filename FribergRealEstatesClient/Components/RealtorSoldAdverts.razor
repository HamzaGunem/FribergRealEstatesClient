@inject IRealtorService realtorService

@* made by Samuel *@
@if(isError)
{
	<MudAlert Severity="Severity.Error">
		Kunde inte ladda annonsinformation. Vänligen försök igen.
	</MudAlert>
}
else if(getAdverts != null)
{
	<MudPaper Class="d-flex flex-row overflow-auto" Elevation="1">
		@foreach(var advert in showAdverts)
		{
			<MudCard Class="m-2" Style="min-width: 100px; max-width: 200px">
				
				<MudCardMedia Image="advert.MISSING_PROP!" Style="height: 140px"/>
				
				
				<MudCardContent>
					<MudText Typo="Typo.h6" >@advert.Street @advert.City</MudText>
					<MudText Typo="Typo.h6">@advert.Area</MudText>
					<MudText Typo="Typo.h6">@advert.CurrentPrice</MudText>
				</MudCardContent>
			</MudCard>
		}
	</MudPaper>

	<MudSpacer />
	<div class="d-flex justify-content-center mt-2">
		<MudButton Variant.Outlined Disabled="@(_startIndex == 0)" OnClick="Previous">Föregående</MudButton>
		<MudButton Class="ml-2" Variant="Variant.Outlined" Disabled="@(_startIndex + _pageSize >= showAdverts.Count)" onclick="Next">Nästa</MudButton>

	</div>
	@*
	for(int i = 0; i < maxAdverts; i++)
	{
		@foreach (var advert in getAdverts)
		{
			<div>
				<MudPaper Class=" pa-4 align-start d-flex" Style="width: 250px;" Outlined="true">
					<MudPaper Class="pa-3" Elevation="6">@advert.City</MudPaper>
				</MudPaper>
			</div>

		}
	}
	*@
}
else
{
	<p>Loading...</p>
}

@code {
	[Parameter]
	public int Id { get; set; }

	private bool isError = false;

	private List<RealtorAdvertsDto> getAdverts { get; set; } = new();

	private List<RealtorAdvertsDto> showAdverts => getAdverts.Skip(_startIndex).Take(_pageSize).ToList();
	private int _startIndex = 0;
	private int _pageSize = 5;
	/*
	protected override async Task OnParametersSetAsync()
	{
		isError = false;

		try
		{
			getAdverts = await realtorService.GetSoldByRealtorAsync(Id);
			}
		catch(Exception ex)
		{
			isError = true;
			Console.Error.WriteLine($"Fel vid hämtning av Annonser för mäklarprofil med Id: {Id}: {ex.Message}");
			}
		}*/

	protected override async Task OnInitializedAsync()
	{
		isError = false;

		try
		{
			getAdverts = await realtorService.GetSoldByRealtorAsync(Id);
		}
		catch (Exception ex)
		{
			isError = true;
			Console.Error.WriteLine($"Fel vid hämtning av Annonser för mäklarprofil med Id: {Id}: {ex.Message}");
		}
	}

	private void Next()
	{
		if (_startIndex + _pageSize < getAdverts.Count)
			_startIndex += _pageSize;
	}

	private void Previous()
	{
		if (_startIndex - _pageSize >= 0)
			_startIndex -= _pageSize;
	}
}
