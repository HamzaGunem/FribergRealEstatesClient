<MudPaper Class="p-4" Elevation="3" Style="background-color: #405168; width: 400px; margin-right: 0px; border-radius: 15px;">
    <MudText Typo="Typo.h5" Class="mb-4" Style="color: #ffde6f; font-weight: bold; text-align: center;">Sök bostäder</MudText>

    <MudGrid>
        <MudItem xs="12" Class="mb-4">
            <MudTextField @bind-Value="Filter.Address"
                          Placeholder="Område"
                          Variant="Variant.Outlined"
                          Clearable="true"
                          Style="background-color: white; color: black; border-radius: 15px;" />
        </MudItem>

        <MudItem xs="12" Class="mb-4">
            <MudGrid Class="mb-4" Justify="Justify.Center">
                @foreach (var type in Enum.GetValues<ResidenceType>())
                {
                    <MudItem xs="12" sm="6" Class="d-flex justify-center">
                        <MudButton Class="@($"residence-btn {(_selectedTypes.Contains(type) ? "selected" : "")}")"
                                   Variant="Variant.Filled"
                                   OnClick="@(() => ToggleType(type))"
                                   Style="min-height: 50px; min-width: 150px; text-transform: none;">
                            @type.ToString()
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>

        <MudItem xs="6" Class="mb-4">
            <MudNumericField @bind-Value="Filter.MinRooms"
                             Placeholder="Min antal rum"
                             Variant="Variant.Text"
                             Min="1"
                             Style="background-color: white; color: black; border-radius: 15px; height: 55px" />
        </MudItem>

        <MudItem xs="6" Class="mb-4">
            <MudNumericField @bind-Value="Filter.MaxRooms"
                             Placeholder="Max antal rum"
                             Variant="Variant.Text"
                             Min="1"
                             Style="background-color: white; color: black; border-radius: 15px; height: 55px" />
        </MudItem>

        <MudItem xs="6" Class="mb-4">
            <MudNumericField @bind-Value="Filter.MinPrice"
                             Placeholder="Min pris (SEK)"
                             Variant="Variant.Text"
                             Min="0"
                             Style="background-color: white; color: black; border-radius: 15px; height: 55px" />
        </MudItem>

        <MudItem xs="6" Class="mb-4">
            <MudNumericField @bind-Value="Filter.MaxPrice"
                             Placeholder="Max pris (SEK)"
                             Variant="Variant.Text"
                             Min="0"
                             Style="background-color: white; color: black; border-radius: 15px; height: 55px" />
        </MudItem>

        <MudItem xs="6" Class="mb-4">
            <MudNumericField @bind-Value="Filter.MinArea"
                             Placeholder="Min area (m²)"
                             Min="0"
                             Style="background-color: white; color: black; border-radius: 15px; height: 55px" />
        </MudItem>

        <MudItem xs="6" Class="mb-4">
            <MudNumericField @bind-Value="Filter.MaxArea"
                             Placeholder="Max area (m²)"
                             Min="0"
                             Style="background-color: white; color: black; border-radius: 15px; height: 55px" />
        </MudItem>
    </MudGrid>

    <div class="mt-4 text-center">
        <MudButton Variant="Variant.Filled"
                   FullWidth="true"
                   OnClick="@OnApplyFilter"
                   Style="background-color: #FFDE6F; color: black; min-height: 50px; border-radius: 15px">
            Sök
        </MudButton>
    </div>
</MudPaper>

@code {
    [Parameter] public AdvertFilterDto Filter { get; set; } = new();
    [Parameter] public EventCallback<IEnumerable<ResidenceType>> OnResidenceTypesChanged { get; set; }
    [Parameter] public EventCallback OnApplyFilter { get; set; }

    private HashSet<ResidenceType> _selectedTypes = new();

    protected override void OnParametersSet()
    {
        _selectedTypes = Filter.ResidenceTypes?.ToHashSet() ?? new();
    }

    private void ToggleType(ResidenceType type)
    {
        if (_selectedTypes.Contains(type))
            _selectedTypes.Remove(type);
        else
            _selectedTypes.Add(type);

        Filter.ResidenceTypes = _selectedTypes.ToList();
        OnResidenceTypesChanged.InvokeAsync(_selectedTypes);
    }
}
<style>
    /* Force override MudBlazor's styles */
    button.residence-btn.mud-button-root.mud-button-filled {
        background-color: #c9b381 !important;
        color: black !important;
        border-radius: 15px !important;
    }

    /* Selected state */
    button.residence-btn.selected.mud-button-root.mud-button-filled {
        background-color: #ffde6f !important;
        color: black !important;
    }

</style>