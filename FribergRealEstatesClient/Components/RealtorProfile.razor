@inject IRealtorService realtorService

@*made by Samuel*@
@if(isError)
{
	<MudAlert Severity="Severity.Error">
		Kunde inte ladda profilinformation. Vänligen försök igen.
	</MudAlert>
}
else if(profileDto != null)
{
	<div style="max-height: 200px;">
		<MudCard Style="display: flex; flex-direction: row;">
			<div>
				@if (!string.IsNullOrEmpty(profileDto.PictureUrl))
				{
					<MudCardMedia Image="@profileDto.PictureUrl" Style="object-fit: cover; width: 150px;" />
				}
				else
				{
					<MudCardMedia Src="https://www.ohio.edu/voinovich-school/sites/ohio.edu.voinovich-school/files/styles/max_650x650/public/default_images/portrait-missing.png?itok=ZIakRUEV" Style="object-fit: cover; width: 150px;" />
				}
			</div>


			<div>
				<MudCardContent>
					<MudText Typo="Typo.h5">@profileDto.FirstName @profileDto.LastName</MudText>
					<MudText Typo="Typo.body2">@profileDto.PhoneNumber</MudText>
				</MudCardContent>
				<MudCardActions>
					@*<MudButton Variant="Variant.Text" Color="Color.Primary">@profileDto.Email</MudButton>*@
					<MudLink Href="mailto:profileDto.Email" Target="_blank">@profileDto.Email</MudLink>
				</MudCardActions>
			</div>
		</MudCard>
	
	</div>
}
else
{
	<p>Loading...</p>
}


@code {
	[Parameter]
	public int Id { get; set; }

	private RealtorProfileDto profileDto;

	private bool isError = false;

	protected override async Task OnParametersSetAsync()
	{
		isError = false;

		try
		{
			profileDto = await realtorService.GetRealtorProfile(Id);
		}
		catch(Exception ex)
		{
			isError = true;
			Console.Error.WriteLine($"Fel vid hämtning av mäklarprofil med Id: {Id}: {ex.Message}");
		}
	}
}
